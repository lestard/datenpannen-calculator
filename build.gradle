apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "application"

apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.9.0-M3'
    }
}


sourceCompatibility= 1.7
def javaHome = "${System.properties['java.home']}"


// Die Haupt-Klasse. Zum Starten: 'gradle run'
mainClassName = "de.hszg.datenpannen.Main"

manifest.mainAttributes("Main-Class" : mainClassName)


// Task zum Erzeugen der Verzeichnis-Struktur für Java-Projekte.
task "create-dirs" << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdir()}
}


repositories {
	mavenCentral()
    maven{
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}


dependencies {

    // JavaFX ist erst ab Java 7 vernünftig verfügbar. Ältere Versionen von Java werden deshalb nicht unterstützt.
    if(!JavaVersion.current().isJava7Compatible()){
        throw new GradleException("Java wird mindestens in Version 7 benötigt. Gefunden wurde: ${System.getProperty('java.version')}");
    }

    // Bei Java 7 wird JavaFX beim JDK mitgeliefert, jedoch nicht automatisch auf den Classpath gelegt.
    // Es muss deshalb per Hand als Abhängigkeit hinzugefügt werden.
    if(JavaVersion.current().isJava7()){
        compile files("$javaHome/lib/jfxrt.jar")
    }

    // UI-Bibliothek für JavaFX
    compile "com.airhacks:afterburner.fx:1.2"

    compile "eu.lestard:advanced-bindings:0.1.0-SNAPSHOT"

    // testing
    testCompile "junit:junit:4.11"
    testCompile "org.assertj:assertj-core:1.6.0"
    testCompile "eu.lestard:assertj-javafx:0.1.0"
    testCompile "org.mockito:mockito-core:1.9.5"
}
